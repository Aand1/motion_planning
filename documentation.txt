========= region.py =========

CLASSES

Region
--------
Methods:
	contains_point(self,pt)
	-----------------------
	Returns true if Region contains pt. Returns false otherwise.
	
	line_hits_obstacle(self,p1,p2)
	------------------------------
	Returns true if the line between points p1 and p2 hits an obstacle. Returns false otherwise.
	It checks possible intersection with edges sequentially. Note, this function is valid for 
	rectangular regions only; although discretization methods might be adapted to a larger range
	of obstacles, it considerably slows down the algorithm
	
	dist_to_point(self,pt)
	----------------------
	Returns the closest point in Region to pt and the distance between them.
	This computation is currently valid for rectangular regions only.
	
	uniform_sample(self)
	--------------------
	Returns a single point sampled uniformly at random in Region
	
	plot_region(self)
	-----------------
	Plots Region and adds it to current plot.
	

========= fmt.py =========

DATA STRUCTURES

List of Points: V
-----------------
A list of all sampled points in our space, where each point is a tuple: [(x0,y0),(x1,y1),...,(xN,yN)]
(x0,y0) is the initial point xinit
The algorithm never changes V after initial sampling.
The index in V of a point is used to refer to the point throughout the algorithm as pID or zID.

Points not in tree: W
---------------------
A set of indices of points not yet added to the tree, where indices refer to locations in the list V.

Nearby points and associated info: neighbors
--------------------------------------------
A dictionary whose keys are point IDs, and whose values are a data structure containing information about
the points close to that point (that is, those points returned by Near()).
In particular, for the key pID, the data structure associated with pID is a list containing
	(0) A dictionary whose keys are the IDs of nearby points, and whose values are a list of the cost
	of arriving at that point from pID, and an integer indicating whether the segment from pID to that
	point hits an obstacle. Ie. {neighbID1:[cost,hits_obstacle],neighbID2:[cost,hits_obstacle],...}
	(1) A set containing the IDs of the nearby points. Ie. {neighbID1,neighbID2,...}
In total, one key-value pair of neighbors looks like:
	pID:[{neighbID1:[cost,hits_obstacle],neighbID2:[cost,hits_obstacle],...},{neighbID1,neighb/.ID2,...}]
The Near and Save functions are combined into just the Near function, which simply updates this global
data structure by adding the key-value pair for the requested point.

Frontier of tree: H and Hheap
-----------------------------
Keeps track of those points to which we may connect points being added to the tree.
H is a set of indices of points, already members of the tree, contained in H, where indices refer to 
locations in the list V.
Hheap is a binary min heap, ordered by the distance from xinit in our tree of each pID. It contains
tuples of the form (cost,pID).

Cost dictionary: Cost
---------------------
A dictionary whose keys are the point IDs, and whose values are the cost for reaching that point via
our tree.
Instead of implementing a Cost function, we simply access entries of this dictionary.
The cost only has to be computed when we first add a point to the dictionary.

Tree Graph as dictionary: E
---------------------------
The tree graph is a dictionary whose keys are the pIDs of the non-base nodes of our tree, and the
values are the parent nodes of those nodes. This allows us to easily read off the path from any node
to the base from E. For example, the following tree:
			3
		1 <	4
	0 <	  			has representation E = {3:1,4:1,5:2,6:2,1:0,2:0}
		2 < 5
			6

FUNCTIONS

SampleFree(k,obs,reg)
---------------------
Samples k points uniformly at random in our space. Returns sampled points that are not in
any obstacle.
Note, this function does not check for duplicate points; however, duplicates are very unlikely.

CollisionFree(p1,p2,obs)
------------------------
Returns true if an collision-free between points p1 and p2 can be constructed.
CollisionFree actually calls a function in file region.py.

Near(V,obs,neighbors,zID,r)
---------------------------
Computes nearest neighbors for point z with point ID zID.
For each neighbor p of z, we construct or update a dictionary Nz and a set Nzset that we
add to neighbors entry for zID (see neighbors data structure).
This computation can be done offline for improved computation time.

ComputeMin(Ynear,Cost,xID,neighbors)
------------------------------------
Returns argmin_{y in Ynear}(Cost(y,T=(V,E))+Cost(y,x)) and the associated cost: this function
implements the dynamic programming step of the FMT* alogrithm.

offline_sampling(k,rk,xinit,reg,obs)
------------------------------------
Calls SampleFree and Near functions. This function is implemented to enable offline computation
of nearest neighbors, which substantially decreases computation time.


========= trajectory_optimization.py =========

FUNCTIONS

GenerateBubble(pt,obs)
----------------------
Returns tuple (center,radius,closestpoint).
The largest bubbles centered at pt that does not intersect an obstacle has radius equal to the 
distance to the closest obstacle. radius is that distance. closestpoint is the point on that
obstacle which is distance radius from pt. center is the pt passed to the function.
Knowing this point is essential for the TranslateBubble function.

TranslateBubble(bubble,r_l,obs)
-------------------------------
Attempts to translate bubble along the normal to the closest obstacle so that it has largest possible
radius less than r_l without overlapping any obstacle.
bubble is (center,radius,closestpt), where closestpt is the closest point of an obstacle.
Hence, the normal is the line from closestpt to center.

BubbleGeneration(P,obs,r_l)
---------------------------
Generates a bubble around the points P that do not intersect any obstacles. First creates the largest
possibe bubble with that center. If that radius is below r_l, attempts to enlarge the 
bubble to radius r_l by translating the center of the bubble. Uses GenerateBubble and 
TranslateBubble.

elastic_stretching(P,v,u,bubbles)
---------------------------------
Returns new waypoints P of smoothed path

speed_optimization(P)
---------------------
Return speeds and controls, defined at the midpoints between the waypoints in P, in tuple (v,u).


========= trajectory_plotting.py =========

FUNCTIONS

PlotBubbles(bubbles)
--------------------
Plots bubbles given by the centers and radii found in bubbles.

PlotTrajectory(P)
-----------------
Plots waypoints and joining edges found in P.
